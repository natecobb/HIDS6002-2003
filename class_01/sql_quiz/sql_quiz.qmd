---
title: "SQL quiz results"
format: 
  html:
    embed-resources: true
---

```{r setup, include=FALSE}
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# Import Data

```{r }
#read the data in
survey_df <- read.csv('Data/student_report.csv')

#dropping personal columns
survey_df <- survey_df[-c(1:7)]

# Replace the names with something easier to work with
rep_let = rep(c("ANSWER_" , "POINTS_") , times=6)
rep_num = as.character(rep(c(1:6) , each=2))
col_names = paste0(rep_let, rep_num)

names(survey_df)[1:12] <- c(col_names)
survey_df <- 
  survey_df %>%
  mutate_all(as.character)

```

# Question 1

## Which command in SQL allows you to choose which columns will be returned in the result set?

-   GROUP BY
-   WHERE
-   SELECT
-   HAVING

The `SELECT` command is the first line of a standard SQL query and indicates which columns in the result set should be returned. `WHERE` is SQL's filtering command. `GROUP BY` groups data by a single field to support aggregation, while `HAVING` is a secondary filter that can be used after a `GROUP BY` operation.

```{r}
library(ggplot2)

ggplot(survey_df , aes(x=ANSWER_1 , fill=ANSWER_1)) + 
  geom_bar(width=0.2 ) +
  scale_x_discrete(limits=c( "GROUP BY" ,"SELECT" ,  "HAVING" , "WHERE")) +
  scale_fill_manual(values = c("SELECT"= "green" ) ,guide="none")
```

# Question 2

## Where is the error in this SQL statement?

`SELECT record_company, band, album, COUNT()  
FROM albums 
GROUP BY record_company, band  
HAVING COUNT(*)`

-   In the `GROUP BY` clause
-   In the `FROM` clause
-   in the `HAVING` clause

When grouping using the `GROUP BY` clause, any field in the `SELECT` clause must either be something we are grouping by, or an "aggregation" command (like `COUNT()`)

```{r}

ggplot(survey_df , aes(x=ANSWER_2 , fill=ANSWER_2)) + 
  geom_bar(width=0.2) + 
  scale_x_discrete(labels= c("In the GROUP BY clause" = "GROUP BY" , "In the HAVING clause" = "HAVING" , "In the FROM clause" = "FROM" ) , limits = c("In the GROUP BY clause" , "In the HAVING clause" ,"In the FROM clause")) +
  scale_fill_manual(values = c("In the GROUP BY clause"= "green" ) ,guide="none")



```

# Question 3

## A common table expression:

-   embeds a formula in a column
-   is an inline view
-   is an alias for a table name
-   No answer text provided.

A common table expression (CTE) is a way of writing a subquery like a view to help with clarity of your code. Its often called an 'inline view' for this reason. 

```{r}

 ggplot(survey_df , aes(x=ANSWER_3 , fill = ANSWER_3)) + 
  geom_bar(width=0.2) + 
   scale_x_discrete(labels= c("is an alias for a table name" = "ALIAS" ,"No answer text provided." = "NO ANSWER"  , "is an inline view" = "INLINE VIEW" , "embeds a formula in a column" = "EMBEDS FORMLA" ) , limits = c("is an alias for a table name" ,  "is an inline view" ,"embeds a formula in a column" , "No answer text provided.")) +
  scale_fill_manual(values = c("is an inline view"= "green" ) ,guide="none")


```

# Question 4

## An inner join between two tables returns

-   Only rows with a common identifier
-   All rows from one table, plus matching rows from the other
-   All rows in both tables

In general you only need to remember to kinds of joins - a "LEFT OUTER JOIN" and an "INNER JOIN". Because all directional joins are "outer" joins "LEFT JOIN" is shorthand for "LEFT OUTER JOIN". An inner join returns only the rows that have a matching identifier in both tables, while a left join returns all rows from the left hand table (regardless of match), but only rows on the right where there is a match.

```{r}
 ggplot(survey_df , aes(x=ANSWER_4 ,fill=ANSWER_4)) + 
  geom_bar(width=0.2) + 
   scale_x_discrete(labels= c("All rows in both tables" = "ALL ROWS" ,"No answer text provided." = "NO ANSWER" ,"Only rows with a common identifier" = "COMMON IDENTIFIER" , "All rows from one table, plus matching rows from the other" = "ALL PLUS MATCHING" ) , limits = c("All rows in both tables" , "Only rows with a common identifier" ,"All rows from one table, plus matching rows from the other" , "No answer text provided.")) + 
  scale_fill_manual(values=c("Only rows with a common identifier" = "green") , guide="none")


```

# Question 5

## The CAST statement:

-   Moves a column's position
-   Converts the variable type of a column
-   Updates an index

The `CAST` statement changes the variable type of a column or returned variable.

```{r}

ggplot(survey_df , aes(x=ANSWER_5 , fill=ANSWER_5)) + 
  geom_bar(width=0.2) + 
  scale_x_discrete(labels=c("Converts the variable type of a column" = "Converts type" ,"No answer text provided." = "NO ANSWER" ,"Updates an index" = "UPDATES INDEX" ,"Moves a column's position" = "MOVES COLUMN'S POSITION") , limits=c("Converts the variable type of a column","No answer text provided." , "Moves a column's position" , "Updates an index" )) +
  scale_fill_manual(values=c("Converts the variable type of a column" = "green") , guide="none")


```

# Question 6

## What command would you use to calculate the number of days between two dates?

Date "addition" isn't well defined in standard SQL and is often handled differently by different databases ("language extensions")

All SQL databases should support simple subtraction such as "date1 - date2" yielding a number of days.

Sometimes however we want our answer in a different way, and generally need a function

MS SQL Server has the command `DATEDIFF` which takes how you want the returned interval (hours, days, weeks etc) and two dates and returns the difference.

PostgresSQL which we will be using doesn't have a command like this, but it has something similar, the `AGE()` function. Instead of returning a number of days, it returns a special variable type called an `interval`. If we look at this as a string it will appear something like "1 year, 2 months and 3 days", but underneath is really just an integer representing time in seconds. We can use a second function `EXTRACT` to pull out the portion we want, eg `EXTRACT(DAYS FROM AGE(birthdate, deathdate))`

```{r}
library(ggwordcloud)
ggplot(survey_df , aes(label = ANSWER_6)) +
  geom_text_wordcloud() +
  theme_bw()
```
