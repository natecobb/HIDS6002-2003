---
title: "Lecture 10 Homework Key"
format: 
  html:
    self-contained: true
---

```{r setup, include=FALSE}
#| warning: false
library(tidyverse)     # loads the tidyverse tools
library(RPostgres)     # loads the database driver for PostgreSQL
library(connections)   # helps RPostgres work with RStudio
library(keyring)       # access to a local encrypted keychain for passwords


con <- connection_open(RPostgres::Postgres(),
          dbname = "syntheticMGUH",
          host = "35.199.4.72",
          user = "hids502_student",
          password = key_get(service = "syntheticmguh", 
                             username = "hids502_student"),
          # Tell the driver to return very large integers as floating point (vs truncating them)
          bigint = "numeric")

knitr::opts_chunk$set(connection = "con")
```

# SyntheticMGUH Registry

A clinician has collected a series of patients that they will to work with other researchers on. This collection was derived from an EMR and is present in the SyntheticMGUH database as a table called `inpatientregistry` (technically a view). 

* [NIH PHI Review](https://privacyruleandresearch.nih.gov/pr_08.asp#8a) - Includes the 18 elements

They have placed their registry in your regulard database in a table called `inpatientregistry`. Note that it contains columns that are identifiers, and columns that are not. *Your homework report should not contain any identifiers. You will be docked points if it does.*

```{sql connection=con}
-- Note that you should delete this section, its just an example
-- SELECT * FROM inpatientregistry LIMIT 5
```

# Fully De-identified Table

Create and return a data set that is fully de-identified.

 * Include all dates 'date shifted'
 * Include the age at the time of admission and age at the date of death (from the original dates)
 * Include as much of the data as possible, without violating HIPAA!

Build a patient lookup table. Note that we should probably randomize the order of the MRNs to make sure that our new ones and the old ones aren't in synch. This happens naturally here, but normally it would be best practice.

```{sql connection=con}
DROP TABLE IF EXISTS patient_lookup
```

There are two ways to create an offset for a date shift, either assign a random number to every MRN, or extract a "psuedo-random" number from somewhere in the patient record. The former is the *right* way to do it, the latter might be used occasionally in the real world but has issues. The latter is also much easier as you don't need to create a standalone table to keep track of the offsets.

Here we create a temporary table to map our "old" MRNs to our de-identified ones and add a random number for the offset. We can then join against this as needed later in the script.


```{sql connection=con}
-- We only want one row per MRN!!
-- if we execute random() multiple times we will get multiple results
WITH distinct_mrns AS (
  SELECT DISTINCT medical_record_id FROM inpatientregistry
)
SELECT 
  medical_record_id,
  10000 + row_number() OVER () as new_mrn,
  365 + cast(random() * 365 as INT) as date_shift_offset
INTO TEMP TABLE patient_lookup
FROM distinct_mrns
```

Here is our full deidentified table

```{sql connection=con}
SELECT new_mrn,  
   CASE WHEN date_part('year', age(admission_date, birthdate)) >= 90 THEN 90 
     ELSE date_part('year', age(admission_date, birthdate)) END as age_at_admission,
   admission_date + date_shift_offset as admission_date_shifted,
   discharge_date + date_shift_offset as discharge_date_shifted,
   CASE WHEN date_part('year', age(deathdate, birthdate)) >= 90 THEN 90 
     ELSE date_part('year', age(deathdate, birthdate)) END as age_at_death,
   race, ethnicity, gender, state,
   code, description, reasoncode, reasondescription
FROM inpatientregistry
  LEFT JOIN patient_lookup 
    ON patient_lookup.medical_record_id = inpatientregistry.medical_record_id
```

We can also do this in one pass without the lookup tables - this is the less optimal solution but acceptable. Using a hash vs a lookup table is a bit controversial - its fine at a technical level if done appropriatel, but some people think that legally it might not be sufficient. This is because if you can guess (or know) one piece of data, for example a MRN, then you can figure out the "salt" used for the hash. If the data has a finite list of values (eg numbers, dates, names) then somene can use a "dictionary attack" to re-identify the data. 

A "salt" is essentially a piece of text that is prepended to the string being hashed that serves like a secret key. Can you think of a way to use a salt here to avoid the above dictionary attack? The first correct answer emailed to Dr. Cobb is worth a bonus point on this homework.

Note that another technique, also less preferred, to create a date offset is to grab it from somewhere in the patient record, for example the last 3 numbers of their medical record. Essentially this would mean to determine the offset someone would need to know the patients MRN, which would mean they had already broken the deidentification. There are limits to this approach, but its functional. 

```{sql connection=con}
DROP TABLE IF EXISTS inpatientregistry_hipaa
```
```{sql connection=con}
-- Use a CTE to make sure we have a single random number to use across the entire row 
-- if we execute random() multiple times we will get multiple results
SELECT 
   md5(CAST(medical_record_id AS VARCHAR)) as new_mrn,
   CASE WHEN date_part('year', age(admission_date, birthdate)) >= 90 THEN 90 
     ELSE date_part('year', age(admission_date, birthdate)) END as age_at_admission,
   admission_date + CAST(LEFT(CAST(medical_record_id AS VARCHAR), 3) AS INT) as admission_date_shifted,
   discharge_date + CAST(LEFT(CAST(medical_record_id AS VARCHAR), 3) AS INT) as discharge_date_shifted,
   CASE WHEN date_part('year', age(deathdate, birthdate)) >= 90 THEN 90 
     ELSE date_part('year', age(deathdate, birthdate)) END as age_at_death,
   race, ethnicity, gender, state,
   code, description, reasoncode, reasondescription
INTO TEMP TABLE inpatientregistry_hipaa
FROM inpatientregistry
```

```{sql connection=con}
SELECT * FROM inpatientregistry_hipaa
```
# Limited Data Set Table

Create and return a data set that is de-identified to HIPAA standards. Technically you can return a date of birth, but generally there is no good reason to do so (unless its a pediatric patient).

```{sql connection=con}
DROP TABLE IF EXISTS inpatientregistry_hipaa_limited
```
```{sql connection=con}
WITH distinct_mrns AS (
  SELECT DISTINCT medical_record_id FROM inpatientregistry
),
patient_offsets AS (
  SELECT medical_record_id, 365 + CAST(random() * 365 as INT) as date_shift_offset
  FROM distinct_mrns
)
SELECT 
   md5(CAST(inpatientregistry.medical_record_id AS VARCHAR)) as new_mrn,
   CASE WHEN date_part('year', age(admission_date, birthdate)) >= 90 THEN 90 
     ELSE date_part('year', age(admission_date, birthdate)) END as age_at_admission,
   admission_date,
   discharge_date,
   deathdate,
   race, ethnicity, gender, 
   city, state, county, zip,
   code, description, reasoncode, reasondescription
INTO TEMP TABLE inpatientregistry_hipaa_limited
FROM inpatientregistry
LEFT JOIN patient_offsets ON patient_offsets.medical_record_id = inpatientregistry.medical_record_id
```
```{sql connection=con}
SELECT * FROM inpatientregistry_hipaa_limited
```

# Demonstrate Equivilence

Show that the 3 tables are equivilent, that we have not lost or corrupted any data in the process. At the minumum, show that you have the same number of unique identifiers (in other words, your deidentified results have the exact same number of patients as the original table.)

Note the use of fixed strings here (to generate the `table` name) and UNION statements to generate a short report.

```{sql connection=con}
SELECT 
  'inpatientregistry' as table,  
  COUNT(*) AS rows, COUNT(DISTINCT medical_record_id) AS patients
FROM inpatientregistry
UNION
SELECT 
 'inpatientregistry_hipaa' as table, 
 COUNT(*) AS rows, COUNT(DISTINCT new_mrn) AS patients
 FROM inpatientregistry_hipaa
UNION
SELECT 
  'inpatientregistry_hipaa_limited' as table,
  COUNT(*) AS rows, COUNT(DISTINCT new_mrn) AS patients
  FROM inpatientregistry_hipaa_limited
```

# Normalization

Here we normalize in the CTEs, then re-de-normalize at the end and execute a check to make sure our data looks the same (basically). 

For brevity and to make the code more understandable I have not de-identified here. 


```{sql connection=con}
WITH patients AS (
  SELECT DISTINCT
     medical_record_id,
     deathdate,
     race, ethnicity, gender, 
     city, state, county, zip
  FROM inpatientregistry
),
encounters AS (
SELECT 
     medical_record_id,
     admission_date,
     discharge_date,
     code, description, reasoncode, reasondescription
FROM inpatientregistry
),
new_descriptions AS 
(
SELECT code AS old_code, description ,
row_number() OVER (ORDER BY description) AS new_code
FROM inpatientregistry
GROUP BY code, description
)
SELECT COUNT(*) AS rows, COUNT(DISTINCT encounters.medical_record_id) AS patients
  FROM patients
  LEFT JOIN encounters ON encounters.medical_record_id = patients.medical_record_id
  LEFT JOIN new_descriptions ON new_descriptions.old_code = encounters.code

```
