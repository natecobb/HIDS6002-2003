---
title: "Lecture 12 Example"
format: 
  html:
    self-contained: true
---

```{r setup, include=FALSE}
#| warning: false
library(tidyverse)     # loads the tidyverse tools
library(RPostgres)     # loads the database driver for PostgreSQL
library(connections)   # helps RPostgres work with RStudio
library(keyring)       # access to a local encrypted keychain for passwords


con <- connection_open(RPostgres::Postgres(),
          dbname = "syntheticMGUH",
          host = "35.199.4.72",
          user = "hids502_student",
          password = key_get(service = "syntheticmguh", 
                             username = "hids502_student"),
          # Tell the driver to return very large integers as floating point (vs truncating them)
          bigint = "numeric")

```

There are a couple of libraries to access the OpenAI API - we will use the one recommended by OpenAI.

```{r}
#renv::install("ben-aaron188/rgpt3")
```

```{r}
library(rgpt3)
library(glue)
gpt3_authenticate("class_12/access_key.txt")
```

```{r}
prompt <- "Why did the chicken cross the road?"
output <- gpt3_single_completion(prompt)
response <- output[[1]]$gpt3

glue("Question: {prompt}} 
      Answer: {response}")
```
```{r}
patient_note <- dbGetQuery(con, "SELECT patient, date, note_text FROM notes LIMIT 1")
note_text <- patient_note$note_text
cat(note_text)
```

```{r}
prompt <- glue("Please turn the following medical note into a Shakespearean sonnet: \n\n {note_text}")
output <- chatgpt_single(prompt_content = prompt, 
                         max_tokens = 1000,
                         model = 'gpt-4-1106-preview')
response <- output[[1]]$chatgpt_content

cat(response)
```
