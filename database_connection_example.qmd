---
title: "Quarto database example"
author: "Nathan Cobb"
format: 
  html:
    self-contained: true
---

This is an example Quarto document that shows how to connect to the Synthetic MGUH database (a PostgreSQL database in the Google Cloud environment). Quarto is most commonly used to execute chunks of R or Python code sequentially, but can be used for many different kinds of code, including SQL. Here we will use it as a wrapper around SQL and RStudio as a basic interface to our database to query the database.

After executing the first chunk, you should have be able to see "syntheticmguh" in the connections pane and use that to browse the tables and fields (look for the `public` schema). Note that we are using an additional package called `connections` to make sure that the database is browsable in the "Connections" pane in the top right of the RStudio interface. 

```{r}
#| warning: false
library(tidyverse)     # loads the tidyverse tools
library(RPostgres)     # loads the database driver for PostgreSQL
library(connections)   # helps RPostgres work with RStudio
library(keyring)       # access to a local encrypted keychain for passwords

# You will need to set your password once here:
# key_set(service = "syntheticmguh", username = "hids502_student", prompt = "Password: ")

# Note we use "connection_open" rather than "dbConnect", this is to ensure full integration
# with RStudio in the database pane on the right using the `connections` package.
con <- connection_open(RPostgres::Postgres(),
          dbname = "syntheticMGUH",
          host = "34.85.177.140",
          user = "hids502_student",
          password = key_get(service = "syntheticmguh", 
                             username = "hids502_student")
          )
```

# Querying via SQL

We can query our database by writing bare SQL, in general this is what we will expect you to do most of the time.

```{sql, connection = con}
SELECT gender, COUNT(*) total_patients 
FROM patients
GROUP BY gender
```

# Querying and saving 

Sometimes you may want to take the results from your query and then pass them to plotting or other manipulations. You can do this with the `output.var` parameter. (Note that the date manipulations in the SQL below are PostgreSQL specific - we will review this in more detail in the course.)

```{sql connection=con, output.var="patients_df"}
-- Here we use `output.var` to assign the results of the query to a variable
-- rather than printing!
 SELECT gender, date_part('year', age(deathdate, birthdate)) AS age
 FROM patients
 WHERE deathdate IS NOT NULL
```

```{r}
ggplot(patients_df) + 
  geom_boxplot(aes(x = age, fill = gender)) +
  ggtitle(label = "Patients Age at Death")
```
