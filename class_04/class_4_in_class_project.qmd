---
title: "COVID Registry Skeleton"
format: 
  html:
    embed-resources: true
---

```{r}
#| warning: false
library(tidyverse)     # loads the tidyverse tools
library(RPostgres)     # loads the database driver for PostgreSQL
library(connections)   # helps RPostgres work with RStudio
library(keyring)       # access to a local encrypted keychain for passwords

con <- connection_open(RPostgres::Postgres(),
          dbname = "syntheticMGUH",
          host = "34.85.177.140",
          user = "hids502_student",
          password = key_get(service = "syntheticmguh", 
                             username = "hids502_student"),
          bigint = "numeric")

```

# COVID Data

How many encounters for COVID? Here we are going to use a fuzzy match using SQL, ie the "%" sign and the LIKE
```{sql connection=con}
-- Your code goes here
SELECT reasondescription,
  COUNT(id) AS encounters, 
  COUNT(DISTINCT patient) as patients
FROM encounters
WHERE reasondescription like '%COVID%'
GROUP BY reasondescription
```


Why kind of encounters are these?

```{sql connection=con}
SELECT encounterclass, description, count(*) 
FROM encounters 
WHERE reasondescription like '%COVID%' 
GROUP BY encounterclass, description
```

Where what about lab tests? These show in the `observations` tables. How may tests did we have, what proportion were positive? You will want to start by looking at the table structure, then figuring out how you might be able to find a value. Remember, these disease is COVID-19, but the virus is SARS-CoV-2!

```{sql connection=con}
SELECT *
  from observations 
  LIMIT 10
```
How about people who are recorded as having COVID as a problem/condition? What kinds of problem/conditions do we have? How many patients were suspected to have COVID in 2020?

```{sql connection=con}
SELECT *
  from conditions 
  LIMIT 10
```

## Creating A COVID Registry

Create a "registry" of the outpatients diagnosed with COVID (by any manner). Create your "registry" as a CTE and then show that you can query against it to provide summary metrics, eg total numbers etc.

You may want to use either a `UNION` clause, or construct a join using the `WHERE id IN (SELECT id FROM ...)` syntax which returns a single row per match regardless of the number of matching rows on the right.


```{sql connection=con}
with anemic_population as (
  -- Select everyone that *currently* has diabetes
  select distinct conditions.start, patients.*
  from patients
  join conditions on conditions.patient = patients.id
    and description like 'Anemia%' 
)
-- Now use that big 'view' to get just the count of patients
select count(*) from anemic_population 
```

